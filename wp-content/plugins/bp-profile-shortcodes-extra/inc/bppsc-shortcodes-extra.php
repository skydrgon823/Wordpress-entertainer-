<?php/** @package bp-Profile-Shortcodes-Extra*/// Todo: Add list pagination with JS reveal/hide// Todo: Add list sort ordering // Todo: Add Friends online status to profile List Friends list?// Todo: Add profile Lists My recent forum topics?// Todo: Add profile Lists my recent forum replies?// Todo: Add friends suggest from group members?if ( !defined( 'ABSPATH' ) ) exit;if(!class_exists('bppsc_shortcodes')):    class bppsc_shortcodes{		var $not_valid;		var $not_valid_group;		var $no_friends;		var $no_groups;	        function __construct(){			$this->not_valid = esc_textarea( __( 'User not found', 'bp-Profile-Shortcodes-Extra' ) );			$this->not_valid_group = esc_textarea( __( 'Group not found', 'bp-Profile-Shortcodes-Extra' ) );			$this->no_friends = esc_textarea( __( 'BuddyPress Friends not active', 'bp-Profile-Shortcodes-Extra' ) );			$this->no_groups = esc_textarea( __( 'BuddyPress Groups not active', 'bp-Profile-Shortcodes-Extra' ) );			add_shortcode('bpps_profile_displayname', array($this,'bppsc_bp_profile_displayname'));            add_shortcode('bpps_profile_email', array($this,'bppsc_bp_profile_email'));            add_shortcode('bpps_profile_username', array($this,'bppsc_bp_profile_username'));            add_shortcode('bpps_profile_avatar', array($this,'bppsc_bp_profile_avatar'));            add_shortcode('bpps_profile_avatar_url', array($this,'bppsc_bp_profile_avatar_url'));			add_shortcode('bpps_profile_avatar_link', array($this,'bppsc_bp_profile_avatar_link'));			add_shortcode('bpps_profile_cover_image', array($this,'bppsc_bp_profile_cover_image'));			add_shortcode('bpps_profile_cover_image_url', array($this,'bppsc_bp_profile_cover_image_url'));			add_shortcode('bpps_profile_cover_image_link', array($this,'bppsc_bp_profile_cover_image_link'));			add_shortcode('bpps_profile_header', array($this,'bppsc_bp_profile_header'));            add_shortcode('bpps_profile_url', array($this,'bppsc_bp_profile_url'));            add_shortcode('bpps_profile_edit_url', array($this,'bppsc_bp_profile_edit_url'));            add_shortcode('bpps_profile_field', array($this,'bppsc_bp_profile_field'));            add_shortcode('bpps_profile_lists', array($this,'bppsc_bp_profile_lists'));            add_shortcode('bpps_profile_private_message_link', array($this,'bppsc_bp_profile_private_message'));            add_shortcode('bpps_whats_new', array($this,'bppsc_bp_whats_new'));            add_shortcode('bpps_group_url', array($this,'bppsc_bp_group_url'));            add_shortcode('bpps_group_avatar', array($this,'bppsc_bp_group_avatar'));            add_shortcode('bpps_group_avatar_url', array($this,'bppsc_bp_group_avatar_url'));            add_shortcode('bpps_group_avatar_link', array($this,'bppsc_bp_group_avatar_link'));            add_shortcode('bpps_group_cover_image', array($this,'bppsc_bp_group_cover_image'));            add_shortcode('bpps_group_cover_image_url', array($this,'bppsc_bp_group_cover_image_url'));            add_shortcode('bpps_group_cover_image_link', array($this,'bppsc_bp_group_cover_image_link'));            add_shortcode('bpps_group_header', array($this,'bppsc_bp_group_header'));            add_shortcode('bpps_group_members', array($this,'bppsc_bp_group_member_list'));            add_shortcode('bpps_group_description', array($this,'bppsc_bp_group_description'));            add_shortcode('bpps_group_field', array($this,'bppsc_bp_group_field'));        }		function bppsc_bp_group_field( $atts = array() ) {			$atts = shortcode_atts( array(				'group_id' => bp_get_current_group_id(),				'field_id' => 'name'			), $atts );						$group = groups_get_group($atts['group_id']);						switch ( $atts['field_id'] ) {				case 'id':					$field = $group->id;					break;				case 'name':					$field = $group->name;					break;				case 'description':					$field = $group->description;					break;				case 'creator_id':					$field = $group->creator_id;					break;				case 'creator_displayname':					$field = bp_core_get_user_displayname($group->creator_id);					break;				case 'creator_username':					$creator_id = $group->creator_id;					$user = get_userdata($creator_id);					$field = $user->user_login;					break;				case 'status':					$field = $group->status;					break;				case 'date_created':					$field = $group->date_created;					break;				case 'slug':					$field = $group->slug;					break;				default:					$field = $group->name;			}						return $field;					}				function bppsc_bp_group_description( $atts = array() ) {			$atts = shortcode_atts( array(				'group_id' => bp_get_current_group_id()			), $atts );			return $atts['group_id'] ? bp_get_group_description( groups_get_group( $atts['group_id'] ) ) : '';		}		function bppsc_bp_whats_new( $atts ) {						$logged_in = $this->bppsc_logged_in_check();            			$atts = shortcode_atts(array(                'user_id'			=> $logged_in,            ),$atts);						if ($atts['user_id'] == 0 || $atts['user_id'] == '' ) return;			if ( bp_get_theme_package_id() == 'legacy' ) {				$template = plugin_dir_path( __DIR__ ) . 'templates/legacy/activity/post-form.php';			} else if ( bp_get_theme_package_id() == 'nouveau' ) {				$template = plugin_dir_path( __DIR__ ) . 'templates/nouveau/activity/post-form.php';			}			ob_start();			load_template( $template, false );			$content = ob_get_contents();			ob_end_clean();			return $content;		}				function bppse_friend_suggested_user_ids( $user_id ) {			global $wpdb;						$bpps = buddypress();			return $wpdb->get_col( $wpdb->prepare( "SELECT friend_user_id FROM {$bpps->friends->table_name} WHERE initiator_user_id = %d AND is_confirmed = 0", $user_id ) );		}				function bppsc_bp_profile_lists($atts) {						if ( isset( $atts['list_type'] ) && $atts['list_type'] == 'friends' ) {								if ( ! bp_is_active( 'friends' ) ) {										return $this->no_friends;								}						}						if ( !isset( $atts['list_type'] ) || $atts['list_type'] == 'groups'  || $atts['list_type'] == 'group-lists') {								if ( ! bp_is_active( 'groups' ) ) {										return $this->no_groups;								}						}			if ( ! bp_is_root_blog() ) {								return;						}						$list = $this->bppsc_bp_profile_list($atts);						return $list;		}		function bppsc_bp_profile_list($atts) {            			global $bp;						$logged_in = $this->bppsc_logged_in_check();            			$atts = shortcode_atts(array(                'user_id'			=> $logged_in,				'displayed' 		=> '',				'list_type'			=> 'groups',				'option' 			=> 'avatar-grid',				'members_sort'		=> 'newest',				'groups_sort'		=> 'newest',				's_title'			=> 'no',				'per_page' 			=> 20,				'class' 			=> 'avatar',				'latest_update'		=> true,				'width' 			=> 100,				'height' 			=> 100,				'group_desc'		=> true,				'created'			=> false,				'admin'				=> false,				'rand'				=> false,				'promoted_groups'	=> '',				'display_count' 	=> false,				'mention_name'		=> '',				'alt'				=> esc_textarea( __( 'Member avatar', 'bp-Profile-Shortcodes-Extra' ) )            ),$atts);						if ( $atts['mention_name'] != '' && is_string( $atts['mention_name'] ) ) $atts['user_id'] = bp_activity_get_userid_from_mentionname( $atts['mention_name'] );			if ($atts['displayed'] == 'Yes' ) { $atts['user_id'] = bp_displayed_user_id();}			if ($atts['user_id'] == 0 || $atts['user_id'] == '' ) { return $this->not_valid;}			// Profile friends lists			if ( $atts['list_type'] == 'friends' || $atts['list_type'] == 'friends_suggest' ) {								$friends_ids = friends_get_friend_user_ids($atts['user_id']);				$friend_count = bp_get_total_friend_count( $atts['user_id']);				if ( $atts['list_type'] == 'friends_suggest' ) {										$output = '<div class="bpps-profile-friend-suggest">';								} else {										$output = '<div class="bpps-profile-friends">';								}								if ( $atts['s_title'] != 'no' ) {										if ( $atts['s_title'] == 'default' ) {												if ( $atts['list_type'] == 'friends_suggest' ) {														$output .= '<h4>' . $this->bppsc_bp_profile_displayname( array( 'user_id' =>$atts['user_id'] ) ) 								. esc_textarea( __( "'s friend suggestions", "bp-Profile-Shortcodes-Extra" ) ) . '</h4>';												} else {														$output .= '<h4>' . $this->bppsc_bp_profile_displayname( array( 'user_id' =>$atts['user_id'] ) ) 								. esc_textarea( __( "'s friends", "bp-Profile-Shortcodes-Extra" ) ) . '</h4>';											}										} else {												$output .= '<h4>' . $atts['s_title'] . '</h4>';										}				}								if ( $friend_count <= 0 ) { 										$output .= esc_textarea( __( 'Member has no friends', 'bp-Profile-Shortcodes-Extra' ) ) . '</div>';										return $output;				}								if ( $atts['list_type'] == 'friends_suggest' ) {					$possible_friends = $this->get_suggested_friends_ids($atts, $friends_ids);					if ( ! empty( $possible_friends ) ) {												$friends_ids = $possible_friends;						$friend_count = count( $friends_ids );										} else {						$members = esc_textarea( __( 'View Members list', 'bp-Profile-Shortcodes-Extra' ) );												$output .= esc_textarea( __( 'No friend suggestions', 'bp-Profile-Shortcodes-Extra' ) ) . '<br><a href="' . bp_get_members_directory_permalink() 							. '" title="' . $members . '">' . $members . '</a></div>';						return $output;					}				}								$per_page = 0;								if ( $atts['option'] == 'list' ) {					$output .= '<ul>';					foreach($friends_ids as $friend_id) {												$per_page = $per_page + 1;												$output .= '<a href="' . bp_core_get_user_domain( $friend_id ) . '" title="'  . bp_core_get_user_displayname($friend_id) . '">'							. bp_core_get_user_displayname($friend_id) . '</a>';						if ( $atts['list_type'] == 'friends_suggest' ) {						$button_url = wp_nonce_url( $this->bppsc_bp_profile_url( array( 'user_id' => $atts['user_id'], 'profile_page'=> 'friends' ) ) 							. 'add-friend/' . $friend_id . '/', 'friends_add_friend' );						$output .= '<span class="bpps-add-friend"><a href="' . $button_url . '" title="'  . bp_core_get_user_displayname($friend_id) . '">'							. esc_textarea( __( ' Add ', 'bp-Profile-Shortcodes-Extra' ) ) . bp_core_get_user_displayname($friend_id)							. esc_textarea( __( ' as a friend', 'bp-Profile-Shortcodes-Extra') ) . '</a></span>';						}						if ( $atts['latest_update'] != false ) {							$update = bp_get_activity_latest_update($friend_id);							$output .= '<span class="bpps-latest-update"> ' . $update . '</span>';						}												if ( $per_page >= $atts['per_page'] ) { break; }										}										$output .= '</ul>';									} else if ( $atts['option'] == 'avatar-grid' || $atts['option'] == 'avatar-grid-name' ) {										if ( $atts['option'] == 'avatar-grid-name' ) {						$output .= '<div style="display: flex;">';					}					foreach($friends_ids as $friend_id) {												$per_page = $per_page + 1;												$feat_image = bp_core_fetch_avatar (    array(  'item_id' => $friend_id, // id of user for desired avatar								'type'    	=> 'full',								'html'   	=> FALSE,     // FALSE = return url, TRUE (default) = return img html							)						);												if ( $atts['option'] == 'avatar-grid-name' ) {							$output .= '<div style="display:grid; margin-left: auto; margin-right: auto;">';						}						if ( $atts['option'] == 'avatar-grid' ) {													$output .= '<a href="' . bp_core_get_user_domain( $friend_id ) . '" title="'  . bp_core_get_user_displayname($friend_id) . '"><img class="' . $atts['class']								. '" height="' . $atts['height'] . '" width="' . $atts['width'] . '" src="'. $feat_image .'"></a>';						}												if ( $atts['option'] == 'avatar-grid-name' ) {							$output .= '<a href="' . bp_core_get_user_domain( $friend_id ) . '" style="margin-left:auto; margin-right: auto;" title="'  . bp_core_get_user_displayname($friend_id) . '"><img class="' . $atts['class'] . '" height="' . $atts['height'] . '" width="' . $atts['width'] . '" src="'. $feat_image .'"></a>';							$output .= '<span> </span><a href="' . bp_core_get_user_domain( $friend_id ) . '" title="'  . bp_core_get_user_displayname($friend_id) . '">'							. bp_core_get_user_displayname($friend_id) . '</a>';						}												if ( $per_page >= $atts['per_page'] ) { break; }										}										if ( $atts['option'] == 'avatar-grid-name' ) {						$output .= '</div>';					}				} else if ( $atts['option'] == 'avatar-list' ) {											foreach($friends_ids as $friend_id) {												$feat_image = bp_core_fetch_avatar (    array(  'item_id' => $friend_id, // id of user for desired avatar								'type'    	=> 'full',								'html'   	=> FALSE,     // FALSE = return url, TRUE (default) = return img html							)						);												$output .= '<li><a href="' . bp_core_get_user_domain( $friend_id ) . '" title="'  . bp_core_get_user_displayname($friend_id) . '"><img class="' . $atts['class']							. '" height="' . $atts['height'] . '" width="' . $atts['width'] . '" src="'. $feat_image .'"></a>';												$output .= '<span> </span><a href="' . bp_core_get_user_domain( $friend_id ) . '" title="'  . bp_core_get_user_displayname($friend_id) . '">'							. bp_core_get_user_displayname($friend_id) . '</a>';						if ( $atts['list_type'] == 'friends_suggest' ) {														$button_url = wp_nonce_url( $this->bppsc_bp_profile_url( array( 'user_id' => $atts['user_id'], 'profile_page'=> 'friends' ) ) 								. 'add-friend/' . $friend_id . '/', 'friends_add_friend' );														$output .= '<span class="bpps-add-friend"><a href="' . $button_url . '" title="'  . bp_core_get_user_displayname($friend_id) . '">'								. esc_textarea( __( ' Add ', 'bp-Profile-Shortcodes-Extra' ) ) . bp_core_get_user_displayname($friend_id)								. esc_textarea( __( ' as a friend', 'bp-Profile-Shortcodes-Extra') ) . '</a></span>';						}												if ( $atts['latest_update'] != false ) {							$update = bp_get_activity_latest_update($friend_id);							$output .= '<span class="bpps-latest-update"> ' . $update . '</span>';						}						$output .= '</li>';											$per_page = $per_page + 1;												if ( $per_page >= $atts['per_page'] ) { break; }											}					}				if ($atts['display_count'] == true ) {										$singular = esc_textarea( __( ' Friend', 'bp-Profile-Shortcodes-Extra' ) );					$plural = esc_textarea( __( ' Friends', 'bp-Profile-Shortcodes-Extra' ) );					$suggestion_s = esc_textarea( __( ' suggestion', 'bp-Profile-Shortcodes-Extra' ) );					$suggestion_p = esc_textarea( __( ' suggestions', 'bp-Profile-Shortcodes-Extra' ) );										if ( $atts['list_type'] == 'friends' && $friend_count == 1 ) { $message = $singular; } 										else if ( $atts['list_type'] == 'friends' && $friend_count > 1 ) { $message = $plural; }										else if ( $atts['list_type'] == 'friends_suggest' && $friend_count == 1 ) { $message = $singular . $suggestion_s; } 										else if ( $atts['list_type'] == 'friends_suggest' && $friend_count > 1 ) { $message = $singular . $suggestion_p; } 											if ( $atts['list_type'] == 'friends' ) {						$args = array(							'user_id' => $atts['user_id'],							'profile_page' => 'friends'							);											$output .= '<a title="' . esc_textarea( __( 'View all friends', 'bp-Profile-Shortcodes-Extra' ) ) . '" href="' . $this->bppsc_bp_profile_url($args)							. '">' . $friend_count . $message . '</a>';					} else {						$output .= '<a title="' . esc_textarea( __( 'View all members', 'bp-Profile-Shortcodes-Extra' ) ) . '" href="' . site_url() . '/' . bp_get_members_slug() 							. '">' . $friend_count . $message . '</a>';					}				}				// Profile Group Lists				} else if ( $atts['list_type'] == 'groups' || $atts['list_type'] == 'groups_suggest' || $atts['list_type'] == 'group-lists' ) {										$groups_data = $this->get_group_ids($atts );					$groups  = $groups_data[0];					$groups_joined = $groups_data[1];					$join = esc_textarea( __( 'Join ', 'bp-Profile-Shortcodes-Extra' ) );										$output = '<div class="bpps-profile-groups">';										if ( $atts['s_title'] != 'no' ) {												if ( $atts['s_title'] == 'default' && $atts['list_type'] == 'groups' ) {							$output .= '<h4>' . $this->bppsc_bp_profile_displayname( array( 'user_id' =>$atts['user_id'] ) ) 								. esc_textarea( __( "'s groups", "bp-Profile-Shortcodes-Extra" ) ) . '</h4>';						} else if ( $atts['s_title'] == 'default' && $atts['list_type'] == 'groups_suggest' ) {							$output .= '<h4>' . $this->bppsc_bp_profile_displayname( array( 'user_id' =>$atts['user_id'] ) ) 								. esc_textarea( __( "'s suggested groups", "bp-Profile-Shortcodes-Extra" ) ) . '</h4>';						} else if ( $atts['s_title'] == 'default' && $atts['list_type'] == 'group-lists' ) {							$output .= '<h4>' . esc_textarea( __( "Groups", "bp-Profile-Shortcodes-Extra" ) ) . '</h4>';						} else {						$output .= '<h4>' . $atts['s_title'] . '</h4>';										}					}										if ( $groups_joined <= 0 && $atts['admin'] == true ) { 						$output .= esc_textarea( __( 'Not admin of any groups', 'bp-Profile-Shortcodes-Extra' ) );										} else if ( $groups_joined <= 0 && $atts['created'] == true ) { 						$output .= esc_textarea( __( 'Not created any groups', 'bp-Profile-Shortcodes-Extra' ) );										} else if ( $groups_joined <= 0 ) { 						$output .= esc_textarea( __( 'Not a member of any groups', 'bp-Profile-Shortcodes-Extra' ) );					}										if  ( $groups_joined <= 0 ) {						$view_groups = esc_textarea( __( 'View Groups', 'bp-Profile-Shortcodes-Extra' ) );						$output .= '<br><a href="' . bp_get_groups_directory_permalink() . '" title="'  .$view_groups . '">'								. $view_groups . '</a></div>';												return $output;					}										$per_page = 0;										if ( $atts['option'] == 'list' ) {													$output .= '<ul>';												foreach($groups as $group_id) {														$group_info = groups_get_group( $group_id );														$output .= '<a href="' . $this->bppsc_bp_group_url(array('group_id' => $group_id)) . '" title="'  . $group_info->name . '">'								. $group_info->name . '</a>';							if ( $atts['list_type'] == 'groups_suggest' ) {								$button_url = wp_nonce_url( trailingslashit( bp_get_group_permalink( $group_info ) . 'join' ), 'groups_join_group' );								$output .= '<span class="bpps-join-group"><a href="' . $button_url . '" title="'  . $join . $group_info->name									. '">' . $join . $group_info->name . '</a></span>';							}							if ( $atts['group_desc'] != false ) {								$output .= '<span class="bpps-grp-desc">' . bp_get_group_description($group_info) . '</span>';							}							$per_page = $per_page + 1;														if ( $per_page >= $atts['per_page'] ) { break; }						}												$output .= '</ul>';											} else if ( $atts['option'] == 'avatar-grid' || $atts['option'] == 'avatar-grid-name' ) {												if ( $atts['option'] == 'avatar-grid-name' ) {							$output .= '<div style="display: flex;">';						}						foreach($groups as $group_id) {														$group_info = groups_get_group( $group_id );														$feat_image = bp_core_fetch_avatar (    array( 									'object'	=> 'group',									'item_id' 	=> $group_id, // id of user for desired avatar									'type'    	=> 'full',									'html'   	=> FALSE,     // FALSE = return url, TRUE (default) = return img html								)							);														if ( $atts['option'] == 'avatar-grid-name' ) {								$output .= '<div style="display:grid; margin-left: auto; margin-right: auto;">';							}							if ( $atts['option'] == 'avatar-grid' ) {								$output .= '<a href="' . $this->bppsc_bp_group_url(array('group_id' => $group_id)) . '" title="'  . $group_info->name . '"><img class="' . $atts['class']									. '" height="' . $atts['height'] . '" width="' . $atts['width'] . '" src="'. $feat_image .'"></a>';							}														if ( $atts['option'] == 'avatar-grid-name' ) {								$output .= '<a href="' . $this->bppsc_bp_group_url(array('group_id' => $group_id)) . '" style="margin-left:auto; margin-right:auto;" title="'  . 		$group_info->name . '"><img class="' . $atts['class'] . '" height="' . $atts['height'] . '" width="' . $atts['width'] . '" src="'. $feat_image .'"></a>';								$output .= '<a href="' . $this->bppsc_bp_group_url(array('group_id' => $group_id)) . '" title="'  . $group_info->name . '">'								. $group_info->name . '</a></div>';							}														$per_page = $per_page + 1;														if ( $per_page >= $atts['per_page'] ) { break; }						}												if ( $atts['option'] == 'avatar-grid-name' ) {							$output .= '</div>';						}					} else if ( $atts['option'] == 'avatar-list' ) {						foreach($groups as $group_id) {														$group_info = groups_get_group( $group_id );														$feat_image = bp_core_fetch_avatar (    array(  									'object'	=> 'group',									'item_id' 	=> $group_id, // id of user for desired avatar									'type'    	=> 'full',									'html'   	=> FALSE,     // FALSE = return url, TRUE (default) = return img html								)							);							$output .= '<li><a href="' . $this->bppsc_bp_group_url(array('group_id' => $group_id)) . '" title="'  . $group_info->name . '"><img class="' . $atts['class']								. '" height="' . $atts['height'] . '" width="' . $atts['width'] . '" src="'. $feat_image .'"></a>';														$output .= '<span> </span><a href="' . $this->bppsc_bp_group_url(array('group_id' => $group_id)) . '" title="'  . $group_info->name . '">'								. $group_info->name . '</a>';							if ( $atts['list_type'] == 'groups_suggest' ) {								$button_url = wp_nonce_url( trailingslashit( bp_get_group_permalink( $group_info ) . 'join' ), 'groups_join_group' );								$output .= '<span class="bpps-join-group"><a href="' . $button_url . '" title="'  . $join . $group_info->name									. '">' . $join . $group_info->name . '</a></span>';							}							if ( $atts['group_desc'] != false ) {								$output .= '<span class="bpps-grp-desc">' . bp_get_group_description($group_info) . '</span>';							}							$output .= '</li>';														$per_page = $per_page + 1;														if ( $per_page >= $atts['per_page'] ) { break; }						}					}					if ($atts['display_count'] == true ) {						$singular = esc_textarea( __( ' Group', 'bp-Profile-Shortcodes-Extra' ) );						$plural = esc_textarea( __( ' Groups', 'bp-Profile-Shortcodes-Extra' ) );						$admin = esc_textarea( __( '  administered', 'bp-Profile-Shortcodes-Extra' ) );						$created = esc_textarea( __( '  created', 'bp-Profile-Shortcodes-Extra' ) );						$joined = esc_textarea( __( '  joined', 'bp-Profile-Shortcodes-Extra' ) );						$suggested = esc_textarea( __( ' Suggested', 'bp-Profile-Shortcodes-Extra' ) );												if ( $atts['admin'] == true && $groups_joined == 1 ) $message = $singular . $admin;						else if ( $atts['admin'] == true && $groups_joined > 1 ) $message = $plural . $admin;						else if ( $atts['created'] == true && $groups_joined == 1 ) $message = $singular . $created;						else if ( $atts['created'] == true && $groups_joined > 1 ) $message = $plural . $created;						else if ( $atts['list_type'] == 'groups_suggest' && $groups_joined == 1 ) $message = $singular . $suggested;						else if ( $atts['list_type'] == 'groups_suggest' && $groups_joined > 1 ) $message = $plural . $suggested;						else if ( $atts['list_type'] == 'group-lists' && $groups_joined == 1 ) $message = $singular;												else if ( $atts['list_type'] == 'group-lists' && $groups_joined > 1 ) $message = $plural;												else if ( $groups_joined == 1 ) $message = $singular . $joined;						else if ( $groups_joined > 1 ) $message = $plural . $joined;						$args = array(							'user_id' => $atts['user_id'],							'profile_page' => 'groups'							);												$output .= '<a title="' . esc_textarea( __( 'View all groups', 'bp-Profile-Shortcodes-Extra' ) ) . '" href="' . $this->bppsc_bp_profile_url($args)							. '">' . $groups_joined . $message . '</a>';					}										return $output;									} else if ( $atts['list_type'] == 'members' ) {								$args = array(					'type' 		=> $atts['members_sort'],					'per_page' 	=> $atts['per_page'],					'page' 		=> 1				);								$members_ids = bp_core_get_users( $args );				$members_ids = $members_ids['users'];				$members_count = bp_get_total_member_count();								$output = '<div class="bpps-profile-members">';												if ( $atts['s_title'] != 'no' ) {										if ( $atts['s_title'] == 'default' ) {												$output .= '<h4>' . esc_textarea( __( "Newest Members", "bp-Profile-Shortcodes-Extra" ) ) . '</h4>';										} else {												$output .= '<h4>' . $atts['s_title'] . '</h4>';										}				}								$per_page = 0;								if ( $atts['option'] == 'list' ) {					$output .= '<ul>';					foreach($members_ids as $member_id) {												$per_page = $per_page + 1;												$output .= '<a href="' . bp_core_get_user_domain( $member_id->ID ) . '" title="'  . bp_core_get_user_displayname($member_id->ID) . '">'							. bp_core_get_user_displayname($member_id->ID) . '</a>';						if ( $atts['latest_update'] != false ) {							$update = bp_get_activity_latest_update($member_id->ID);							$output .= '<span class="bpps-latest-update"> ' . $update . '</span>';						}												if ( $per_page >= $atts['per_page'] ) { break; }										}										$output .= '</ul>';									} else if ( $atts['option'] == 'avatar-grid' || $atts['option'] == 'avatar-grid-name' ) {										if ( $atts['option'] == 'avatar-grid-name' ) {						$output .= '<div style="display: flex;">';					}					foreach($members_ids as $member_id) {												$per_page = $per_page + 1;												$feat_image = bp_core_fetch_avatar (    array(  'item_id' => $member_id->ID, // id of user for desired avatar								'type'    	=> 'full',								'html'   	=> FALSE,     // FALSE = return url, TRUE (default) = return img html							)						);												if ( $atts['option'] == 'avatar-grid-name' ) {							$output .= '<div style="display:grid; margin-left: auto; margin-right: auto;">';						}						if ( $atts['option'] == 'avatar-grid' ) {													$output .= '<a href="' . bp_core_get_user_domain( $member_id->ID ) . '" title="'  . bp_core_get_user_displayname($member_id->ID) . '"><img class="' . $atts['class']								. '" height="' . $atts['height'] . '" width="' . $atts['width'] . '" src="'. $feat_image .'"></a>';						}												if ( $atts['option'] == 'avatar-grid-name' ) {							$output .= '<a href="' . bp_core_get_user_domain( $member_id->ID ) . '" style="margin-left:auto; margin-right: auto;" title="'  . bp_core_get_user_displayname($member_id->ID) . '"><img class="' . $atts['class'] . '" height="' . $atts['height'] . '" width="' . $atts['width'] . '" src="'. $feat_image .'"></a>';							$output .= '<span> </span><a href="' . bp_core_get_user_domain( $member_id->ID ) . '" title="'  . bp_core_get_user_displayname($member_id->ID) . '">'							. bp_core_get_user_displayname($member_id->ID) . '</a></div>';						}												if ( $per_page >= $atts['per_page'] ) break;										}										if ( $atts['option'] == 'avatar-grid-name' ) {						$output .= '</div>';					}				} else if ( $atts['option'] == 'avatar-list' ) {											foreach($members_ids as $member_id) {												$feat_image = bp_core_fetch_avatar (    array(  'item_id' => $member_id->ID, // id of user for desired avatar								'type'    	=> 'full',								'html'   	=> FALSE,     // FALSE = return url, TRUE (default) = return img html							)						);												$output .= '<li><a href="' . bp_core_get_user_domain( $member_id->ID ) . '" title="'  . bp_core_get_user_displayname($member_id->ID) . '"><img class="' . $atts['class']							. '" height="' . $atts['height'] . '" width="' . $atts['width'] . '" src="'. $feat_image .'"></a>';												$output .= '<span> </span><a href="' . bp_core_get_user_domain( $member_id->ID ) . '" title="'  . bp_core_get_user_displayname($member_id->ID) . '">'							. bp_core_get_user_displayname($member_id->ID) . '</a>';						if ( $atts['latest_update'] != false ) {							$update = bp_get_activity_latest_update($member_id->ID);							$output .= '<span class="bpps-latest-update"> ' . $update . '</span>';						}						$output .= '</li>';											$per_page = $per_page + 1;												if ( $per_page >= $atts['per_page'] ) break;					}										if ($atts['display_count'] == true ) {											$singular = esc_textarea( __( ' Member', 'bp-Profile-Shortcodes-Extra' ) );						$plural = esc_textarea( __( ' Members', 'bp-Profile-Shortcodes-Extra' ) );												if ( $atts['list_type'] == 'members' && $members_count == 1 ) { $message = $singular; } 												else if ( $atts['list_type'] == 'members' && $members_count > 1 ) { $message = $plural; }												$output .= '<a title="' . esc_textarea( __( 'View all Members', 'bp-Profile-Shortcodes-Extra' ) ) . '" href="' . site_url() . '/' . bp_members_slug							. '">' . $members_count . $message . '</a>';					}				}							$output .='</div>';			return $output;						}		}				function get_suggested_friends_ids($atts, $friends_ids) {			$my_friend_req = (array) $this->bppse_friend_suggested_user_ids( $atts['user_id'] ); //get all friend request by me					$possible_friends = array(); //we will store the possible friend ids here						foreach ( $friends_ids as $friend_id ) {				$possible_friends = array_merge( $possible_friends, (array) friends_get_friend_user_ids( $friend_id ) );			}			$possible_friends = array_unique( $possible_friends );						$friends_ids[] = $atts['user_id']; //include me to//			$excluded_users = get_user_meta( $atts['user_id'], 'hidden_friend_suggestions', true );						if ( !empty( $my_friend_req ) ) {				$excluded_users = array_merge( $friends_ids, (array) $my_friend_req );									} else {				$excluded_users = $friends_ids;			}			$possible_friends = array_diff( $possible_friends, $excluded_users ); //get those user who are not my friend and also exclude me too						if ( ! empty( $possible_friends ) ) {								shuffle( $possible_friends ); //randomize				$friends_ids = array_slice( $possible_friends, 0, $atts['per_page'] );				return $friends_ids;			} else {				return;			}		}				function get_group_ids($atts) {			if ( isset( $atts['admin']) && $atts['admin'] == true ) {				$groups = BP_Groups_Member::get_is_admin_of( $atts['user_id'], $atts['per_page'] );				if ( empty($groups) ) { return array( 0,0); }				$groups_admin = $groups['total'];				$groups = $groups['groups'];				$groups  = wp_list_pluck( $groups, 'id' );				$groups_admin = count($groups);				return array( $groups, $groups_admin );			} else if ( isset( $atts['created']) && $atts['created'] == true ) {				global $wpdb;				$table_name = $wpdb->prefix . "bp_groups";				$groups = $wpdb->get_results( $wpdb->prepare( "SELECT id FROM $table_name WHERE creator_id = %d", $atts['user_id'] ) );				if ( empty($groups) ) { return array( 0,0); }				$groups_created = count($groups);				$groups  = wp_list_pluck( $groups, 'id' );				Return array( $groups, $groups_created );			} else if ( isset( $atts['list_type']) && $atts['list_type'] == 'groups_suggest' ) {				$suggested_groups = array();				$friends_groups = array();				if ( isset( $atts['promoted_groups'] ) ) {					$suggested_groups = explode( ",", $atts['promoted_groups'] );				}				$friends_ids = array();				$friends_ids = friends_get_friend_user_ids($atts['user_id']);				foreach ( $friends_ids as $friend_id ) {					$friend_groups = BP_Groups_Member::get_group_ids( $friend_id, $atts['per_page'] );					$friend_groups = $friend_groups['groups'];					$friends_groups = array_merge( $friend_groups, $friends_groups );				}								if ( !empty($suggested_groups) ) {					$suggested_groups = array_merge(  (array)$suggested_groups, (array)$friends_groups );				} else {					$suggested_groups = $friends_groups;				}				$suggested_groups = array_filter($suggested_groups);				$suggested_groups = array_unique ( $suggested_groups );				$my_groups =  BP_Groups_Member::get_group_ids( $atts['user_id'], $atts['per_page'] );				$my_groups = $my_groups['groups'];				$group_count = count( $my_groups );				$suggested_groups = array_diff( $suggested_groups, $my_groups );				if ( $atts['rand'] = true ) {					if ( ! empty( $suggested_groups ) ) {						shuffle( $suggested_groups ); //randomize					}				}								if ( $atts['per_page'] != '' ) {					$groups = array_slice( $suggested_groups, 0, $atts['per_page'] );				}else {					$groups = $suggested_groups;				}				$group_suggestions = count( $suggested_groups );				return array( $groups, $group_suggestions );			} else if ( isset($atts['list_type'] ) && $atts['list_type'] == 'group-lists' ) {								$args = array(					'type' 		=> $atts['groups_sort'],					'per_page' 	=> $atts['per_page'],					'page' 		=> 1				);								$groups = groups_get_groups( $args );				$total = $groups['total'];				$groups = $groups['groups'];				$group_ids = array();								foreach ( $groups as $group ) {					$group_ids[] = $group->id;				}								return array( $group_ids, $total );								}  else {				$groups = BP_Groups_Member::get_group_ids( $atts['user_id'], $atts['per_page'] );				$groups_joined = $groups['total'];				$groups = $groups['groups'];							Return array( $groups, $groups_joined);			}		}				function bppsc_bp_group_avatar($atts) {			if ( ! bp_is_active( 'groups' ) ) {				return $this->no_groups;			}        	$hash = $this->bppsc_group_url($atts,'bpps_group_avatar','no','image','90');			return $hash;					}        function bppsc_bp_group_avatar_url($atts){			if ( ! bp_is_active( 'groups' ) ) {				return $this->no_groups;			}			$hash = $this->bppsc_group_url($atts,'bpps_group_avatar_url','url','image','');			return $hash;        }        function bppsc_bp_group_avatar_link($atts){			if ( ! bp_is_active( 'groups' ) ) {				return $this->no_groups;			}			$hash = $this->bppsc_group_url($atts,'bpps_group_avatar_link','link','image','');			return $hash;        }        function bppsc_bp_group_cover_image($atts){			if ( ! bp_is_active( 'groups' ) ) {				return $this->no_groups;			}        	$hash = $this->bppsc_group_url($atts,'bpps_group_cover_image','no','cover-image','725');			return $hash;        }        function bppsc_bp_group_cover_image_url($atts){			if ( ! bp_is_active( 'groups' ) ) {				return $this->no_groups;			}        	$hash = $this->bppsc_group_url($atts,'bpps_group_cover_image_url','url','cover-image','');			return $hash;        }        function bppsc_bp_group_cover_image_link($atts){			if ( ! bp_is_active( 'groups' ) ) {				return $this->no_groups;			}        	$hash = $this->bppsc_group_url($atts,'bpps_group_cover_image_url','link','cover-image','725');			return $hash;        }		// Group Member list				function bppsc_bp_group_member_list($atts) {			global $bp; 			$atts = shortcode_atts( array(				'option' 			=> 'avatar-list',				'alt'				=> esc_textarea( __( 'Members profile', 'bp-Profile-Shortcodes-Extra' )),				'before'			=> '',				'class'				=> '',				'content_1_field'	=> '',				'content_2_field'	=> '',				'content_3_field'	=> '',				's_title'			=> 'no',				'after'				=> '',				'height'			=> '',				'group_id'			=> '',				'width'				=> '',                'slug'				=> '',				'display_count' 	=> 'yes',				'per_page' 			=> 20,            ), $atts );			if ( isset( $atts['group_id'] ) ) { 				if ( is_numeric( $atts['group_id'] ) ) {					$group_info = groups_get_group($atts['group_id'] );					$atts['slug'] = $group_info->slug;				}			}			if ( $atts['slug'] == '' ) { 				if ( bp_is_group() ) {					$atts['group_id'] = $bp->groups->current_group->id;				}				if ( isset( $atts['group_id'] ) && is_numeric( $atts['group_id'] ) ) {					$group_info = groups_get_group($atts['group_id'] );					$atts['slug'] = $group_info->slug;				} else {					return $this->not_valid_group; 				}			}			if ( $atts['slug'] != '' ) { 				if ( is_numeric( $this->bppsc_get_group_id($atts['slug']) ) ) {					$args = array( 						'group_id' => $this->bppsc_get_group_id($atts['slug']),						'exclude_admins_mods' => false					);										$group_members_result = groups_get_group_members( $args );					$args = array( 						'group_id' => $this->bppsc_get_group_id($atts['slug']),					);										$group_details_result = groups_get_group( $args );					$result = '';					if ( $atts['s_title'] != 'no' ) {						if ( $atts['s_title'] == 'default' ) {						//	var_dump($group_details_result);							$result .= '<div id=bpse-group-members-title><h4>' . esc_textarea( __( "Members of ", "bp-Profile-Shortcodes-Extra" ) ) . $group_details_result->name 								. '</h4></div>';						} else {							$result .= '<div id=bpse-group-members-title><h4>' . $atts['s_title'] . '</h4></div>';						}					}					$result .= '<div id="bpse-group-members">';					$page_limit = $atts['per_page'];					$i = 1;						foreach(  $group_members_result['members'] as $member ) {							$i + 1;							if ($atts['option'] == 'names') {								$result .= $this->bppsc_bp_profile_url( array( 									'user_id' => $member->ID,									'class' => $atts['class'],									'text' => $this->bppsc_bp_profile_displayname( array( 									'user_id' => $member->ID )										) ) )									. '</br>';							} else if ($atts['option'] == 'avatar-grid' ){								$result .= 	$this->bppsc_bp_profile_avatar_link( array(  									'user_id' => $member->ID,									'class' => $atts['class'],									'width' => $atts['width'],									'alt'	=> $atts['alt'],									'height' => $atts['height'] ) );							} else if ($atts['option'] == 'avatar-list') {								$result .= 	'<li>' . $this->bppsc_bp_profile_avatar_link( array(  									'user_id' => $member->ID,									'class' => $atts['class'],									'width' => $atts['width'], 									'alt'	=> $atts['alt'],									'height' => $atts['height'] ) );								$result .= ' ' . $this->bppsc_bp_profile_url( array( 									'user_id' => $member->ID,									'class' => $atts['class'],									'text' => $this->bppsc_bp_profile_displayname( array( 									'user_id' => $member->ID )										) ) );								if ( $atts['content_1_field'] !== '' ) {									$shortcode_1 = '[bpps_profile_field option="Two" field="' . $atts['content_1_field'] . '" user_id="' . $member->ID . '"]';									$result .= '<p>' . do_shortcode( $shortcode_1 ) . '</p>';								}								if ( $atts['content_2_field'] !== '' ) {									$shortcode_2 = '[bpps_profile_field option="Two" field="' . $atts['content_2_field'] . '" user_id="' . $member->ID . '"]';									$result .= '<p>' . do_shortcode( $shortcode_2 ) . '</p>';								}								if ( $atts['content_3_field'] !== '' ) {									$shortcode_3 = '[bpps_profile_field option="Two" field="' . $atts['content_3_field'] . '" user_id="' . $member->ID . '"]';									$result .= '<p>' . do_shortcode( $shortcode_3 ) . '</p>';								}								$result .= '</li>';							}							if ( $i >= $page_limit ) { break; }						}					if ($atts['display_count'] == 'yes' ) {						$args = array(							'slug' => $atts['slug'],							'page' => 'members'							);						$result .= '<a title="' . esc_textarea( __( 'View all members', 'bp-Profile-Shortcodes-Extra' ) ) . '" href="' . $this->bppsc_bp_group_url($args)							. '">' . $group_members_result['count'] . esc_textarea( __( ' Members', 'bp-Profile-Shortcodes-Extra' ) ). '</a>';					}					$result .= '</div>';					return $result;								} else {				return $this->not_valid_group;				}			} else {				return $this->not_valid_group;			}		}								function bppsc_bp_group_url($atts){			$hash = $this->bppsc_group_url($atts,'bpps_group_url','url','home','');			return $hash;		}		// This finds the group id from the group name - $group_id = BP_Groups_Group::group_exists($group_slug)		function bppsc_get_group_id($slug) {			if ( is_string($slug) ) {				$group_id = groups_get_id( $slug );			}			return $group_id;		}		function bppsc_group_url($atts, $function_name, $show_url = 'url', $url_type = 'home', $dimension = ''){			global $bp; 			$atts = shortcode_atts( array(				'limit' => -1,				'id'=>'',				'text'=>'',				'before'=>'',				'after'=>'',				'rel'=>'',				'group_id' => '',				'target'=>'',				'style'=>'',				'class'=>'',				'attribute_id'=>'',				'title'=>'',				'dimension'=>$dimension,				'tabindex'=>'',				'attributes'=>'',				'show'=>$show_url,				'page'=>$url_type,				'height'=>'',				'width'=>'',				'align'=>'',				'alt'=>'',				'size'=>'full',                'slug'=> '',            ), $atts, $function_name );			if ( isset( $atts['group_id'] ) ) { 				if ( is_numeric( $atts['group_id'] ) ) {					$group_info = groups_get_group($atts['group_id'] );					$atts['slug'] = $group_info->slug;				}			}			if ( $atts['slug'] == '' ) { return $this->not_valid_group; }			$group_id = $this->bppsc_get_group_id($atts['slug']);			if($url_type == 'image' || $url_type == 'cover-image') {				$attributes ='';					if($atts['style']!='')					$attributes .= 'style="'.$atts['style'].'" ';				if($atts['class']!='')					$attributes .= 'class="'.$atts['class'].'" ';				if($atts['alt']!='')					$attributes .= 'alt="'.$atts['alt'].'" ';				if($atts['id']!='')					$attributes .= 'id="'.$atts['attribute_id'].'" ';				if($atts['align']!='')					$attributes .= 'align="'.$atts['align'].'" ';				if($url_type == 'image') {					if(is_numeric($atts['dimension'])) {						$attributes .= 'width="'.$atts['dimension'].'" height="'.$atts['dimension'].'" ';					} else {						if($atts['width']!='')							$attributes .= 'width="'.$atts['width'].'" ';						if($atts['height']!='')							$attributes .= 'height="'.$atts['height'].'" ';					}							$avatar_options = array ( 						'item_id' => $group_id,						'object' => 'group',						'type' => 'full',						'avatar_dir' => 'group-avatars',						'alt' => 'Group avatar',						'class' => 'avatar',						'html' => false						);					$feat_image = bp_core_fetch_avatar($avatar_options);										if($atts['show']=='url') {						return $feat_image;					}										if($atts['show']=='no') {					$img = '<img src="'.$feat_image.'" '.$attributes.' />';					return $img;					}								if($atts['show']=='link') {						$group = groups_get_group( array( 'group_id' => $group_id ) );						$url = trailingslashit( bp_get_root_domain() . '/' . bp_get_groups_root_slug() . '/' . $group->slug . '/' ) ;						$img = '<a href="' . $url . '"><img src="'.$feat_image.'" '.$attributes.' /></a>';						return $img;					}				} else if($url_type == 'cover-image') {				if(is_numeric($atts['dimension'])) {					if($atts['dimension'] == 725) {						$attributes .= 'width="100%" ';					} else {						$attributes .= 'width="'.$atts['dimension'].'" height="'.$atts['dimension'].'" ';					}				} else {					if($atts['width']!='')						$attributes .= 'width="'.$atts['width'].'" ';					if($atts['height']!='')						$attributes .= 'height="'.$atts['height'].'" ';				}					$feat_image = bp_attachments_get_attachment('url', array(				  'object_dir' => 'groups',				  'item_id' => $group_id,				));				if($atts['show']=='url') {					return $feat_image;				}								if ($atts['show']=='no') {					$img = '<img src="'.$feat_image.'" '.$attributes.' />';					return $img;				}				if ($atts['show']=='link') {					$group = groups_get_group( array( 'group_id' => $group_id ) );					$url = trailingslashit( bp_get_root_domain() . '/' . bp_get_groups_root_slug() . '/' . $group->slug . '/' );					$img = '<a href="' . $url . '"><img src="'.$feat_image.'" '.$attributes.' /></a>';					return $img;				}			} 			} else {				$group = groups_get_group( array( 'group_id' => $group_id ) );				if($atts['page'] != 'home' ) {					$url = trailingslashit( bp_get_root_domain() . '/' . bp_get_groups_root_slug() . '/' . $group->slug . '/' . $atts['page'] . '/');				} else {					$url = trailingslashit( bp_get_root_domain() . '/' . bp_get_groups_root_slug() . '/' . $group->slug . '/' );				}				$attributes ='';				if($atts['attribute_id']!='')					$attributes .= 'id="'.$atts['attribute_id'].'" ';					if($atts['class']!='')					$attributes .= 'class="'.$atts['class'].'" ';					if($atts['rel']!='')					$attributes .= 'rel="'.$atts['rel'].'" ';					if($atts['target']!='')					$attributes .= 'target="'.$atts['target'].'" ';					if($atts['style']!='')					$attributes .= 'style="'.$atts['style'].'" ';					if($atts['tabindex']!='')					$attributes .= 'tabindex="'.$atts['tabindex'].'"  ';					if($atts['title']!='')					$attributes .= 'title="'.$atts['title'].'" ';					if($atts['attributes']!='')					$attributes .= $atts['attributes'];					if($atts['text']=='no')				{					$link = '<a href="'.$url.'" '.$attributes.' >';					$output = $link;				}				else if ($atts['text']!='' && $atts['text']!='no')				{					$link = '<a href="'.$url.'" '.$attributes.' >'.$atts['text'].'</a>';					$output = $link;				}				else if($atts['text']=='' && $atts['show']=='url')					$output = $url;				else				{					$link = '<a href="'.$url.'" '.$attributes.' >'.$url.'</a>';					$output = $link;				}				return $atts['before'].$output.$atts['after'];						}		}        function bppsc_bp_group_header($atts){			if ( ! bp_is_active( 'groups' ) ) {				return $this->no_groups;			}        	$hash = $this->bppsc_show_group_header($atts,'bpps_group_header','no','header','1000');			return $hash;        }				function bppsc_show_group_header($atts, $function_name, $show_url = 'url', $url_type = 'home', $dimension = ''){			global $wpdb,$bp;			$atts = shortcode_atts( array(				'show'		=>$show_url,				'group_id'	=> '',				'group_page'=>$url_type,                'slug'		=> '',            ), $atts, $function_name );						if ( isset( $atts['group_id'] ) ) { 				if ( is_numeric( $atts['group_id'] ) ) {					$group_info = groups_get_group($atts['group_id'] );					$atts['slug'] = $group_info->slug;				}			}						if ( $atts['slug'] == '' ) { return $this->not_valid_group; }						$group_id = $this->bppsc_get_group_id($atts['slug']);						if($url_type == 'header') {				$attributes ='';				$avatar_options = array ( 					'item_id' => $group_id,					'object' => 'group',					'type' => 'full',					'avatar_dir' => 'group-avatars',					'alt' => 'Group avatar',					'class' => 'avatar',					'html' => false					);				$feat_image = bp_core_fetch_avatar($avatar_options);								$avatar_img = '<img class="bppse-grp-header-avatar" src="'.$feat_image.'" '.$attributes.' />';				$attributes ='';					$feat_image = bp_attachments_get_attachment('url', array(				  'object_dir' => 'groups',				  'item_id' => $group_id,				));				$cover_img = '<img id="bppse-grp-header-cover-image" src="'.$feat_image.'" '.$attributes.' />';				$group = groups_get_group( array( 'group_id' => $group_id ) );				$url = trailingslashit( bp_get_root_domain() . '/' . bp_get_groups_root_slug() . '/' . $group->slug . '/' );				$group_name = $group->name;				$group_link = '<a href="' . $url . '"><h3 class="bppse-grp-header-nicename"> ' . $group_name . '</h3></a>';				$response = '<div id="bppse-grp-header"><div id="bppse-grp-header-cover-image-cont">' . $cover_img . '</div><div id="bppse-grp-header-avatar">' 					. $avatar_img . '</div><div id="bppse-grp-group-link">' . $group_link . '</div></div>';				return $response;			}		}			// Member Profile shortcode functions        function bppsc_bp_profile_private_message($atts){            global $bp;						$logged_in = $this->bppsc_logged_in_check();            			extract(shortcode_atts(array(                'user_id'		=> $logged_in,				'displayed' 	=> '',				'display_error' => '',				'mention_name'	=> '',				'error_msg'		=> ''            ),$atts));			if ( $mention_name != '' && is_string( $mention_name ) ) $user_id = bp_activity_get_userid_from_mentionname( $mention_name );			if ( $displayed == "Yes" ) { $user_id = bp_displayed_user_id(); }			if ( $displayed == "Author" && ( is_single() || is_page() ) ) $user_id = $this->bppsc_author_id();			if ($user_id == 0 ) {				if ( $error_msg != '' ) {					return $error_msg;				} else if ( $display_error == 'No' ) {					return;				} else {					return $this->not_valid;				}			}						return '<div id="send-private-message" class="generic-button"><a class="send-message" href="'. wp_nonce_url( bp_loggedin_user_domain() . bp_get_messages_slug() .				'/compose/?r=' . bp_core_get_username( $user_id ) ) . '">' . esc_attr( __( 'Private Message ', 'bp-Profile-Shortcodes-Extra' ) ) . 				$this->bppsc_bp_profile_displayname( array( 'user_id' => $user_id ) ) . '</a></div>';			        }			        function bppsc_bp_profile_displayname($atts){            global $bp;			$logged_in = $this->bppsc_logged_in_check();			extract(shortcode_atts(array(                'user_id'		=> $logged_in,				'displayed' 	=> '',				'mention_name'	=> '',				'display_error' => 'Yes'            ),$atts));			if ( $mention_name != '' && is_string( $mention_name ) ) $user_id = bp_activity_get_userid_from_mentionname( $mention_name );			if ( $displayed == "Yes" ) { $user_id = bp_displayed_user_id();}			if ( $displayed == "Author" && ( is_single() || is_page() ) ) $user_id = $this->bppsc_author_id();			if ($user_id == 0 && $display_error == 'No' ) return;			if ($user_id == 0 ) return $this->not_valid;			$new_user_id = $this->bppsc_get_user_id($user_id);			return bp_core_get_user_displayname($new_user_id);        }        function bppsc_bp_profile_email($atts){            global $bp;			$logged_in == $this->bppsc_logged_in_check();			extract(shortcode_atts(array(                'user_id'=> $logged_in,				'displayed' => '',				'mention_name'	=> '',				'display_error' => 'Yes'            ),$atts));			if ( $mention_name != '' && is_string( $mention_name ) ) $user_id = bp_activity_get_userid_from_mentionname( $mention_name );			if ( $displayed == "Yes" ) { $user_id = bp_displayed_user_id();}			if ( $displayed = "Author" && ( is_single() || is_page() ) ) $user_id = $this->bppsc_author_id();			if ($user_id == 0 && $display_error == 'No' ) return;			if ($user_id == 0 ) { return $this->not_valid;}			$user_id = $this->bppsc_get_user_id($user_id);            return bp_core_get_user_email($user_id);        }        function bppsc_bp_profile_username($atts){            global $bp; 			$logged_in = $this->bppsc_logged_in_check();			extract(shortcode_atts(array(                'user_id'=> $logged_in,				'displayed' => '',				'mention_name'	=> '',				'display_error' => 'Yes'            ),$atts));			if ( $mention_name != '' && is_string( $mention_name ) ) $user_id = bp_activity_get_userid_from_mentionname( $mention_name );			if ( $displayed == "Yes" ) { $user_id = bp_displayed_user_id();}			if ( $displayed == "Author" && ( is_single() || is_page() ) ) $user_id = $this->bppsc_author_id();			if ($user_id == 0 && $display_error == 'No' ) return;			if ($user_id == 0 ) { return $this->not_valid;}			$user_id = $this->bppsc_get_user_id($user_id);			$user = get_userdata($user_id);			return $user->user_login;        }				function bppsc_author_id() {			global $post;			return $post->post_author;		}		function bppsc_logged_in_check() {			global $bp;			if (is_user_logged_in() ) {				return $bp->loggedin_user->userdata->ID;			} else {				return 0;			}		}        function bppsc_bp_profile_avatar($atts){        	$hash = $this->bppsc_show_url($atts,'bpps_profile_avatar','no','image');			return $hash;        }        function bppsc_bp_profile_cover_image($atts){        	$hash = $this->bppsc_show_url($atts,'bpps_profile_cover_image','no','cover-image','725');			return $hash;        }        function bppsc_bp_profile_header($atts){        	$hash = $this->bppsc_show_header($atts,'bpps_profile_header','no','header','1000');			return $hash;        }				function bppsc_show_header($atts, $function_name, $show_url = 'url', $url_type = 'profile', $dimension = ''){			global $wpdb,$bp; 			$logged_in = $this->bppsc_logged_in_check();			$atts = shortcode_atts( array(				'show'=>$show_url,				'profile_page'=>$url_type,				'displayed' => '',                'user_id'=> $logged_in,				'mention_name'	=> '',				'display_error' => 'Yes'            ), $atts, $function_name );			if ( $atts['mention_name'] != '' && is_string( $atts['mention_name'] ) ) $atts['user_id'] = bp_activity_get_userid_from_mentionname( $atts['mention_name'] );			if ($atts['displayed'] == 'Yes' ) { $atts['user_id'] = bp_displayed_user_id();}			if ( $atts['displayed'] == "Author" && ( is_single() || is_page() ) ) $atts['user_id'] = $this->bppsc_author_id();			if ( ( $atts['user_id'] == 0 || $atts['user_id'] == '' ) && $display_error == 'No' ) return;			if ($atts['user_id'] == 0 || $atts['user_id'] == '' ) { return $this->not_valid;}			$user_id = $this->bppsc_get_user_id($atts['user_id']);			if($url_type == 'header') {				$attributes ='';				$feat_image = bp_core_fetch_avatar (    array(  'item_id' => $user_id, // id of user for desired avatar            			'type'    => 'full',			            'html'   => FALSE     // FALSE = return url, TRUE (default) = return img html				    )				);								$profile_img = '<img class="bppse-header-avatar" src="'.$feat_image.'" '.$attributes.' />';				$attributes ='';					$args = array(							'object_dir' => 'members',							'item_id'	 => $user_id,							'type'		 => 'cover-image',						);				$feat_image = bp_attachments_get_attachment( 'url', $args );				$cover_img = '<img id="bppse-header-cover-image" src="'.$feat_image.'" '.$attributes.' />';				$user = get_userdata($user_id);				$nicename = $user->user_login;				$profile_url = bp_core_get_user_domain( $user_id );				$profile_link = '<a href="' . $profile_url . '"><h3 class="bppse-header-nicename">@' . $nicename . '</h3></a>';								$response = '<div id="bppse-header"><div id="bppse-header-cover-image-cont">' . $cover_img . '</div><div id="bppse-header-avatar">' 					. $profile_img . '</div><div id="bppse-profile-link">' . $profile_link . '</div></div>';				return $response;			}		}        function bppsc_bp_profile_avatar_url($atts){			$hash = $this->bppsc_show_url($atts,'bpps_profile_avatar_url','url','image','');			return $hash;        }        function bppsc_bp_profile_avatar_link($atts){			$hash = $this->bppsc_show_url($atts,'bpps_profile_avatar_link','link','image','');			return $hash;        }        function bppsc_bp_profile_cover_image_url($atts){        	$hash = $this->bppsc_show_url($atts,'bpps_profile_cover_image_url','url','cover-image','');			return $hash;        }        function bppsc_bp_profile_cover_image_link($atts){        	$hash = $this->bppsc_show_url($atts,'bpps_profile_cover_image_url','link','cover-image','');			return $hash;        }        function bppsc_bp_profile_url($atts){        	$hash = $this->bppsc_show_url($atts,'bpps_profile_url','url','profile','');			return $hash;        }		function bppsc_bp_profile_edit_url($atts){			$hash = $this->bppsc_show_url($atts,'bpps_profile_edit_url','url','profile/edit','');			return $hash;        }       function bppsc_bp_profile_field($atts){            global $wpdb,$bp; 			$logged_in = $this->bppsc_logged_in_check();            extract(shortcode_atts(array(                'field'=> '',                'tab'  => 'Base',                'user_id' => $logged_in,                'empty' => '',				'option' => 'One',				'displayed' => '',                'shortcode' => 0,				'mention_name'	=> '',				'display_error' => 'Yes'            ),$atts));			if ( $mention_name != '' && is_string( $mention_name ) ) $user_id = bp_activity_get_userid_from_mentionname( $mention_name );			if ( $displayed == 'Yes' ) { $user_id = bp_displayed_user_id(); }			if ( $displayed == "Author" && ( is_single() || is_page() ) ) $user_id = $this->bppsc_author_id();			if (($user_id == 0 || $user_id == '' ) && $display_error = 'No' ) return;			if ( $user_id == 0 || $user_id == '' ) return $this->not_valid;			$user_id = $this->bppsc_get_user_id($user_id);			if ( $option == "Two" ) { goto Option_Two;}			$prefix = $wpdb->prefix;            $grp = $wpdb->get_var("SELECT id FROM ".$prefix."bp_xprofile_groups WHERE name='$tab'");            if(empty($grp)){ return esc_textarea( __( 'The tab name is invalid', 'bp-Profile-Shortcodes-Extra' ) );}            $fld = $wpdb->get_var("SELECT id FROM ".$prefix."bp_xprofile_fields WHERE name='$field' AND group_id=$grp");            if(empty($fld)) return esc_textarea( __('The field name is invalid', 'bp-Profile-Shortcodes-Extra' ) );            if( !is_numeric($user_id) ) $user_id = $wpdb->get_var("SELECT ID FROM ".$wpdb->users." WHERE user_login='$user_id'") ;            elseif($user_id == 0) $user_id = (isset($bp->loggedin_user->userdata->ID))? $bp->loggedin_user->userdata->ID : get_current_user_id() ;			$value = $wpdb->get_var("SELECT value FROM ".$prefix."bp_xprofile_data WHERE field_id=$fld AND user_id=$user_id");            if($wpdb->get_var("SELECT type FROM ".$prefix."bp_xprofile_fields WHERE id=$fld") == 'custom_area')                $value = $wpdb->get_var("SELECT name FROM ".$prefix."bp_xprofile_fields WHERE parent_id=$fld AND option_order=2");            $value = preg_replace(array("/\r\n/s", "/\n/s", "/\r/s"),'<br>',$value);			if($shortcode == 1) $value = do_shortcode($value);            if(empty($value)) return $empty;            return $value;			Option_Two:			$field_id = xprofile_get_field_id_from_name( $field );            $value = xprofile_get_field( $field_id, $user_id, true );			$value = $value->data->value;//           $value = preg_replace(array("/\r\n/s", "/\n/s", "/\r/s"),'<br>',$value);			if($shortcode == 1) $value = do_shortcode($value);            if(empty($value)) return $empty;			$value = maybe_unserialize( $value );			if ( is_array( $value ) ) {				return $value[0];			} else {				return $value;			}        }		function bppsc_show_url($atts, $function_name, $show_url = 'url', $url_type = 'profile', $dimension = ''){			global $wpdb,$bp; 			$logged_in = $this->bppsc_logged_in_check();			$atts = shortcode_atts( array(				'limit' 		=> -1,				'id'			=> '',				'text'			=> '',				'before'		=> '',				'after'			=> '',				'rel'			=> '',				'button' 		=> '',				'target'		=> '',				'style'			=> '',				'class'			=> '',				'attribute_id'	=> '',				'title'			=> '',				'dimension'		=> '',				'error_msg'		=> '',				'tabindex'		=> '',				'attributes'	=> '',				'show'			=> $show_url,				'profile_page'	=> 'profile',				'height'		=> 90,				'width' 		=> 90,				'align'			=> '',				'alt'			=> '',				'size'			=> 'full',				'displayed' 	=> '',                'user_id'		=> $logged_in,				'mention_name'	=> '',				'display_error' => 'Yes'            ), $atts, $function_name );			if ( $atts['mention_name'] != '' && is_string( $atts['mention_name'] ) ) $atts['user_id'] = bp_activity_get_userid_from_mentionname( $atts['mention_name'] );			if ( $atts['displayed'] == 'Yes' ) { $atts['user_id'] = bp_displayed_user_id(); }			if ( $atts['displayed'] == "Author" && ( is_single() || is_page() ) ) $atts['user_id'] = $this->bppsc_author_id();			if ( $atts['user_id'] == 0 || $atts['user_id'] == '' ) {				if ( $atts['error_msg'] != '' ) {					return $atts['error_msg'];				} else if ( $atts['display_error'] == 'No' ) {					return;				} else {					return $this->not_valid;				}			}			$user_id = $this->bppsc_get_user_id($atts['user_id']);			if($url_type == 'image') {				$attributes ='';				if($atts['style']!='')					$attributes .= 'style="'.$atts['style'].'" ';				if($atts['class']!='')					$attributes .= 'class="'.$atts['class'].'" ';				if($atts['alt']!='')					$attributes .= 'alt="'.$atts['alt'].'" ';				if($atts['id']!='')					$attributes .= 'id="'.$atts['attribute_id'].'" ';				if($atts['align']!='')					$attributes .= 'align="'.$atts['align'].'" ';				if(is_numeric($atts['dimension'])) {					$attributes .= 'width="'.$atts['dimension'].'" height="'.$atts['dimension'].'" ';				} else {					if($atts['width']!='')						$attributes .= 'width="'.$atts['width'].'" ';					if($atts['height']!='')						$attributes .= 'height="'.$atts['height'].'" ';				}					$feat_image = bp_core_fetch_avatar (    array(  'item_id' => $user_id, // id of user for desired avatar            			'type'    => 'full',			            'html'   => FALSE     // FALSE = return url, TRUE (default) = return img html				    )				);								if($atts['show']=='url') {					return $feat_image;				}								if($atts['show']=='no') {				$img = '<img src="'.$feat_image.'" '.$attributes.' />';				return $img;				}						if($atts['show']=='link') {					$url = bp_core_get_user_domain( $user_id ).$atts['profile_page'];					$img = '<a href="' . $url . '"><img src="'.$feat_image.'" '.$attributes.' /></a>';					return $img;				}			} else if($url_type == 'cover-image') {				$attributes ='';					if($atts['style']!='')					$attributes .= 'style="'.$atts['style'].'" ';				if($atts['class']!='')					$attributes .= 'class="'.$atts['class'].'" ';				if($atts['alt']!='')					$attributes .= 'alt="'.$atts['alt'].'" ';				if($atts['id']!='')					$attributes .= 'id="'.$atts['attribute_id'].'" ';				if($atts['align']!='')					$attributes .= 'align="'.$atts['align'].'" ';				if(is_numeric($atts['dimension'])) {					if($atts['dimension'] == 725) {						$attributes .= 'width="100%" ';					} else {						$attributes .= 'width="'.$atts['dimension'].'" height="'.$atts['dimension'].'" ';					}				} else {					if($atts['width']!='')						$attributes .= 'width="'.$atts['width'].'" ';					if($atts['height']!='')						$attributes .= 'height="'.$atts['height'].'" ';				}					$args = array(							'object_dir' => 'members',							'item_id'	 => $user_id,							'type'		 => 'cover-image',						);				$feat_image = bp_attachments_get_attachment( 'url', $args );				if($atts['show']=='url') {					return $feat_image;				}								if ($atts['show']=='no') {					$img = '<img src="'.$feat_image.'" '.$attributes.' />';					return $img;				}				if ($atts['show']=='link') {					$url = bp_core_get_user_domain( $user_id ).$atts['profile_page'];					$img = '<a href="' . $url . '"><img src="'.$feat_image.'" '.$attributes.' /></a>';					return $img;				}			} else {				$url = bp_core_get_user_domain( $user_id ).$atts['profile_page'].'/';							$attributes ='';				if($atts['attribute_id']!='')					$attributes .= 'id="'.$atts['attribute_id'].'" ';					if($atts['class']!='')					$attributes .= 'class="'.$atts['class'].'" ';					if($atts['rel']!='')					$attributes .= 'rel="'.$atts['rel'].'" ';					if($atts['target']!='')					$attributes .= 'target="'.$atts['target'].'" ';					if($atts['style']!='')					$attributes .= 'style="'.$atts['style'].'" ';					if($atts['tabindex']!='')					$attributes .= 'tabindex="'.$atts['tabindex'].'"  ';					if($atts['title']!='')					$attributes .= 'title="'.$atts['title'].'" ';					if($atts['attributes']!='')					$attributes .= $atts['attributes'];					if($atts['text']=='no')				{					$link = '<a href="'.$url.'" '.$attributes.' >';					$output = $link;				} 				else if ($atts['text'] == 'name' ) {					$link = '<a href="'.$url.'" '.$attributes.' >' . $this->bppsc_bp_profile_displayname( array('user_id' => $atts['user_id'] )) .'</a>';					$output = $link;				}				else if ($atts['text'] == 'username' ) {					$link = '<a href="'.$url.'" '.$attributes.' >' . $this->bppsc_bp_profile_username( array('user_id' => $atts['user_id'] )) .'</a>';					$output = $link;				}				else if ($atts['text']!='' && $atts['text']!='no')				{					$link = '<a href="'.$url.'" '.$attributes.' >'.$atts['text'].'</a>';					$output = $link;				}				else if($atts['text']=='' && $atts['show']=='url')					$output = $url;				else				{					$link = '<a href="'.$url.'" '.$attributes.' >'.$url.'</a>';					$output = $link;				}				if ($atts['button'] == 'button'){					$url = "'" . $url . "'";					 $button = '<form>						<input type="button" value="' . $atts['text'] . '" ' . $attributes . '  onclick="window.location.href=' . $url  . '" />					</form>';					return $button;				} else {					return $atts['before'].$output.$atts['after'];				}				}		}		function bppsc_get_user_id($user_id = "-1"){			global $bp;			if ($user_id == "-1") {				$user_id = $bp->loggedin_user->userdata->ID;			}			if (!is_numeric($user_id)) {				$user = get_user_by( 'id', $user_id);				if (is_user_logged_in()) {					if ($user == false) {						$user_id = $bp->loggedin_user->userdata->ID;					} else {						$user_id = $user->ID;					}				}			}			$user = get_userdata( $user_id );			if (is_user_logged_in()) {				if ($user == false) {					$user_id = $bp->loggedin_user->userdata->ID;				}			}			return $user_id;		}		    }endif;?>